/**
 * Controller para receber notifica√ß√µes de pagamento do microsservi√ßo payment-service
 * Este √© o ponto de integra√ß√£o onde o payment-service informar√° ao monolito
 * sobre atualiza√ß√µes no status de pagamentos.
 */
class PaymentWebhookController {
  constructor(orderService, bagService) {
    this.orderService = orderService;
    this.bagService = bagService;
  }
  async handlePaymentUpdate(req, res, next) {
    /*
    
    */
    try {
      const { orderId, status, paymentId } = req.body;

      if (!orderId || !status) {
        return res.payment_required({
          message: "Dados incompletos. orderId e status s√£o obrigat√≥rios",
        });
      }

      let orderIdInt;
      try {
        orderIdInt = parseInt(orderId);
        if (isNaN(orderIdInt)) {
          throw new Error("OrderId inv√°lido");
        }
      } catch (error) {
        console.error(
          `‚ùå OrderId inv√°lido recebido: ${orderId} (tipo: ${typeof orderId})`
        );
        return res.payment_required({
          message: `OrderId inv√°lido: ${orderId}. Esperado um n√∫mero inteiro.`,
        });
      }

      console.log(
        `üîÑ Convertendo orderId: "${orderId}" (${typeof orderId}) ‚Üí ${orderIdInt} (${typeof orderIdInt})`
      );
      const order = await this.orderService.getOrder(orderIdInt);
      if (!order) {
        return res.not_found();
      }
      console.log(
        `Webhook do payment-service recebido: Pedido ${orderIdInt}, status ${status}, paymentId: ${paymentId}`
      );

      if (status === "approved" || status === "completed") {
        console.log(`Processando pagamento aprovado para pedido ${orderIdInt}`);

        await this.orderService.updateOrderStatus(orderIdInt, "pago");
        
        for (const item of order.items) {
            await this.bagService.changeBagStatus(item.idBag, 0);
        }

        setTimeout(async () => {
          await this.orderService.updateOrderStatus(orderIdInt, "pronto");
          setTimeout(async () => {
            await this.orderService.updateOrderStatus(orderIdInt, "entregue");
          }, 20000);
        }, 20000);


        console.log(
          `‚úÖ Pedido ${orderIdInt} finalizado e sacolas inativadas ap√≥s pagamento aprovado`
        );
      } else if (status === "failed" || status === "cancelled" || status === "rejected") {
        console.log(
          `Cancelando pedido ${orderIdInt} devido ao pagamento ${status}`
        );
        await this.orderService.updateOrderStatus(orderIdInt, "cancelado");
      } else {
        console.log(
          `Status de pagamento desconhecido: ${status} para pedido ${orderIdInt}`
        );
        return res.payment_required({
          message: `Status de pagamento desconhecido: ${status}`,
        });
      }

      return res.ok({
        message: "Notifica√ß√£o processada com sucesso",
      });
    } catch (error) {
      next(error);
    }
  }
}

export default PaymentWebhookController;
