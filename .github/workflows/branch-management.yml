name: "Fluxo de Branches e Tags"

on:
  pull_request:
    types: [closed]
    branches: [develop]
  workflow_dispatch:
    inputs:
      promote_to_main:
        description: 'Promover develop para main (cria tag e faz merge)'
        type: boolean
        required: true
        default: false
      version:
        description: 'Versão para tag (ex: v1.2.3)'
        required: false
        default: ''

permissions:
  contents: write  # Necessário para criar tags e fazer push
  pull-requests: write  # Necessário para interagir com PRs

jobs:
  # Job 1: Quando um PR para develop é fechado e mergeado, cria uma tag para a develop
  tag-develop:
    name: Criar Tag na Develop
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar identidade Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Gerar tag para develop
        id: generate-tag
        run: |
          # Gerar versão automática baseada na data
          DATE=$(date +'%Y%m%d')
          
          # Encontrar a última tag de develop e incrementar
          LATEST_DEV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_DEV_TAG" ]; then
            # Se não houver tag, começar com dev-001
            DEV_NUMBER="001"
          else
            # Incrementar o número da tag de develop
            DEV_NUMBER=$(echo $LATEST_DEV_TAG | sed -E 's/dev-([0-9]+).*/\1/')
            DEV_NUMBER=$(printf "%03d" $((10#$DEV_NUMBER + 1)))
          fi
          
          DEV_TAG="dev-${DEV_NUMBER}"
          
          # Pegar título do PR para mensagem da tag
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          MESSAGE="PR #${PR_NUMBER}: ${PR_TITLE}"
          
          echo "dev_tag=$DEV_TAG" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          
          echo "Criando tag $DEV_TAG na develop"
      
      - name: Criar tag na develop
        run: |
          DEV_TAG="${{ steps.generate-tag.outputs.dev_tag }}"
          MESSAGE="${{ steps.generate-tag.outputs.message }}"
          
          git tag -a "$DEV_TAG" -m "$MESSAGE"
          git push origin "$DEV_TAG"
          
          echo "### ✅ Tag criada com sucesso na develop" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: $DEV_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- Mensagem: $MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: develop" >> $GITHUB_STEP_SUMMARY
      
      - name: Gerar changelog
        run: |
          DEV_TAG="${{ steps.generate-tag.outputs.dev_tag }}"
          
          # Encontrar a penúltima tag para listar mudanças
          PREV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 2 | head -n 1)
          
          echo "### Alterações na tag $DEV_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$PREV_TAG" ]; then
            echo "Mudanças desde $PREV_TAG:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log --pretty=format:"- %s (%an)" $PREV_TAG..HEAD >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Primeiro conjunto de mudanças" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log --pretty=format:"- %s (%an)" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Notificar equipe
        run: |
          echo "### 📢 Nova tag criada na develop" >> $GITHUB_STEP_SUMMARY
          echo "A tag ${{ steps.generate-tag.outputs.dev_tag }} foi criada na branch develop." >> $GITHUB_STEP_SUMMARY
          echo "Esta tag pode ser promovida para a main manualmente através do workflow 'Fluxo de Branches e Tags'." >> $GITHUB_STEP_SUMMARY
  
  # Job 2: Promover alterações da develop para a main (trigger manual)
  promote-to-main:
    name: Promover Develop para Main
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.promote_to_main == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Configurar identidade Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Verificar status das branches
        run: |
          git fetch origin develop
          git fetch origin main
          
          echo "### Status atual das branches" >> $GITHUB_STEP_SUMMARY
          echo "Develop: $(git rev-parse origin/develop)" >> $GITHUB_STEP_SUMMARY
          echo "Main: $(git rev-parse origin/main)" >> $GITHUB_STEP_SUMMARY
      
      - name: Gerar versão para release
        id: generate-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # Usar versão fornecida pelo usuário (sem 'v' prefixo)
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! $VERSION == v* ]]; then
              VERSION="v$VERSION"
            fi
          else
            # Gerar versão automática baseada na última tag de release
            LATEST_TAG=$(git tag -l "v*" | grep -v "dev-" | sort -V | tail -n 1)
            
            if [ -z "$LATEST_TAG" ]; then
              # Se não houver tag, começar com v1.0.0
              VERSION="v1.0.0"
            else
              # Extrair números da versão
              MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\1/')
              MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\2/')
              PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\3/')
              
              # Incrementar patch
              PATCH=$((PATCH + 1))
              VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Versão gerada para release: $VERSION"
      
      - name: Buscar última tag da develop
        id: get-develop-tag
        run: |
          LATEST_DEV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_DEV_TAG" ]; then
            echo "⚠️ Nenhuma tag encontrada na develop" >> $GITHUB_STEP_SUMMARY
            echo "latest_tag=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "latest_tag=$LATEST_DEV_TAG" >> $GITHUB_OUTPUT
          echo "Última tag na develop: $LATEST_DEV_TAG"
      
      - name: Atualizar main com mudanças da develop
        run: |
          VERSION="${{ steps.generate-version.outputs.version }}"
          DEV_TAG="${{ steps.get-develop-tag.outputs.latest_tag }}"
          
          git checkout main
          git pull origin main
          
          # Fazer merge da tag de develop para main
          echo "Realizando merge da tag $DEV_TAG para main"
          git merge --no-ff $DEV_TAG -m "Merge tag $DEV_TAG para release $VERSION"
          
          # Criar tag de versão na main
          git tag -a "$VERSION" -m "Release $VERSION (promovida da tag $DEV_TAG)"
          
          # Fazer push das mudanças
          git push origin main
          git push origin "$VERSION"
          
          echo "### ✅ Main atualizada com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "- Tag da develop: $DEV_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- Nova tag de release: $VERSION" >> $GITHUB_STEP_SUMMARY
      
      - name: Gerar changelog da release
        id: changelog
        run: |
          VERSION="${{ steps.generate-version.outputs.version }}"
          DEV_TAG="${{ steps.get-develop-tag.outputs.latest_tag }}"
          
          # Obter última tag de release para comparar alterações
          PREV_VERSION_TAG=$(git tag -l "v*" | grep -v "dev-" | sort -V | tail -n 2 | head -n 1)
          
          echo "### Changelog da versão $VERSION" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREV_VERSION_TAG" ]; then
            echo "Alterações desde $PREV_VERSION_TAG:" >> changelog.md
            git log --pretty=format:"- %s (%an)" $PREV_VERSION_TAG..$VERSION >> changelog.md
          else
            echo "Primeiro lançamento oficial" >> changelog.md
            git log --pretty=format:"- %s (%an)" $VERSION >> changelog.md
          fi
          
          cat changelog.md >> $GITHUB_STEP_SUMMARY
      
      - name: Criar GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate-version.outputs.version }}
          name: Release ${{ steps.generate-version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notificar conclusão
        run: |
          VERSION="${{ steps.generate-version.outputs.version }}"
          DEV_TAG="${{ steps.get-develop-tag.outputs.latest_tag }}"
          
          echo "### 🚀 Promoção concluída com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "As mudanças da tag $DEV_TAG foram promovidas para main como versão $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "Uma release foi criada no GitHub: https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> $GITHUB_STEP_SUMMARY 