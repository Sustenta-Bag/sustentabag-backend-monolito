name: "Fluxo de Branches e Tags"

on:
  # Acionado quando um PR Ã© fechado e mergeado para qualquer branch
  pull_request:
    types: [closed]
    branches: [develop, feature/*, hotfix/*]
  
  # Acionado quando cÃ³digo Ã© enviado diretamente para branches (sem PR)
  push:
    branches: [develop, feature/*, hotfix/*]
    
  # OpÃ§Ã£o manual para testes
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch para criar tag (ex: develop, feature/nome)'
        required: true
        default: 'develop'

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Criar tags automaticamente para branches
  tag-branch:
    name: Criar Tag AutomÃ¡tica
    # Executar quando: PR fechado+mergeado, push direto, ou execuÃ§Ã£o manual
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && github.actor != 'github-actions[bot]') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do repositÃ³rio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar identidade Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Determinar branch atual
        id: branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Uso da branch especificada manualmente
            BRANCH="${{ github.event.inputs.branch }}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # Uso da branch de destino do PR
            BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            # Uso da branch atual do push
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Branch determinada: $BRANCH" >> $GITHUB_STEP_SUMMARY
      
      - name: Gerar tag baseada na branch
        id: generate-tag
        run: |
          BRANCH="${{ steps.branch.outputs.branch }}"
          DATE=$(date +'%Y%m%d')
          
          if [[ "$BRANCH" == "develop" ]]; then
            # Tag para develop: dev-NNN
            LATEST_DEV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 1)
            
            if [ -z "$LATEST_DEV_TAG" ]; then
              # Se nÃ£o houver tag, comeÃ§ar com dev-001
              DEV_NUMBER="001"
            else
              # Incrementar o nÃºmero da tag de develop
              DEV_NUMBER=$(echo $LATEST_DEV_TAG | sed -E 's/dev-([0-9]+).*/\1/')
              DEV_NUMBER=$(printf "%03d" $((10#$DEV_NUMBER + 1)))
            fi
            
            TAG="dev-${DEV_NUMBER}"
            
          elif [[ "$BRANCH" == feature/* ]]; then
            # Tag para feature: feature-NOME-DATA-HASH
            FEATURE_NAME=$(echo $BRANCH | sed -E 's/feature\/(.*)/\1/')
            SHORT_HASH=$(git rev-parse --short HEAD)
            
            TAG="feature-${FEATURE_NAME}-${DATE}-${SHORT_HASH}"
            
          elif [[ "$BRANCH" == hotfix/* ]]; then
            # Tag para hotfix: hotfix-NOME-DATA-HASH
            HOTFIX_NAME=$(echo $BRANCH | sed -E 's/hotfix\/(.*)/\1/')
            SHORT_HASH=$(git rev-parse --short HEAD)
            
            TAG="hotfix-${HOTFIX_NAME}-${DATE}-${SHORT_HASH}"
            
          else
            # Tag genÃ©rica: branch-NOME-DATA-HASH
            CLEAN_BRANCH=$(echo $BRANCH | sed -E 's/[^a-zA-Z0-9]/-/g')
            SHORT_HASH=$(git rev-parse --short HEAD)
            
            TAG="branch-${CLEAN_BRANCH}-${DATE}-${SHORT_HASH}"
          fi
          
          # Obter mensagem para a tag
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Usar tÃ­tulo do PR
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            MESSAGE="PR #${PR_NUMBER}: ${PR_TITLE}"
          else
            # Usar Ãºltima mensagem de commit
            MESSAGE=$(git log -1 --pretty=%B)
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
      
      - name: Criar tag automÃ¡tica
        run: |
          TAG="${{ steps.generate-tag.outputs.tag }}"
          MESSAGE="${{ steps.generate-tag.outputs.message }}"
          BRANCH="${{ steps.generate-tag.outputs.branch }}"
          
          # Garantir que estamos na branch correta
          git checkout $BRANCH
          git pull origin $BRANCH
          
          # Criar a tag
          git tag -a "$TAG" -m "$MESSAGE"
          git push origin "$TAG"
          
          echo "### âœ… Tag criada com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- Mensagem: $MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: $BRANCH" >> $GITHUB_STEP_SUMMARY
      
      - name: Gerar changelog
        run: |
          TAG="${{ steps.generate-tag.outputs.tag }}"
          BRANCH="${{ steps.generate-tag.outputs.branch }}"
          
          # Encontrar a penÃºltima tag para mesma branch para listar mudanÃ§as
          if [[ "$BRANCH" == "develop" ]]; then
            PREV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 2 | head -n 1)
            TAG_PATTERN="dev-*"
          elif [[ "$BRANCH" == feature/* ]]; then
            FEATURE_NAME=$(echo $BRANCH | sed -E 's/feature\/(.*)/\1/')
            PREV_TAG=$(git tag -l "feature-${FEATURE_NAME}-*" | sort -V | tail -n 2 | head -n 1)
            TAG_PATTERN="feature-${FEATURE_NAME}-*"
          elif [[ "$BRANCH" == hotfix/* ]]; then
            HOTFIX_NAME=$(echo $BRANCH | sed -E 's/hotfix\/(.*)/\1/')
            PREV_TAG=$(git tag -l "hotfix-${HOTFIX_NAME}-*" | sort -V | tail -n 2 | head -n 1)
            TAG_PATTERN="hotfix-${HOTFIX_NAME}-*" 
          else
            CLEAN_BRANCH=$(echo $BRANCH | sed -E 's/[^a-zA-Z0-9]/-/g')
            PREV_TAG=$(git tag -l "branch-${CLEAN_BRANCH}-*" | sort -V | tail -n 2 | head -n 1)
            TAG_PATTERN="branch-${CLEAN_BRANCH}-*"
          fi
          
          echo "### AlteraÃ§Ãµes na tag $TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$PREV_TAG" ]; then
            echo "MudanÃ§as desde $PREV_TAG:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log --pretty=format:"- %s (%an)" $PREV_TAG..HEAD >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Primeiro conjunto de mudanÃ§as nesta branch" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log --pretty=format:"- %s (%an)" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Notificar equipe
        run: |
          TAG="${{ steps.generate-tag.outputs.tag }}"
          BRANCH="${{ steps.generate-tag.outputs.branch }}"
          
          echo "### ðŸ“¢ Nova tag criada" >> $GITHUB_STEP_SUMMARY
          echo "A tag $TAG foi criada na branch $BRANCH." >> $GITHUB_STEP_SUMMARY
          
          if [[ "$BRANCH" == "develop" ]]; then
            echo "Esta tag serÃ¡ promovida automaticamente para a main se os testes passarem." >> $GITHUB_STEP_SUMMARY
          fi 