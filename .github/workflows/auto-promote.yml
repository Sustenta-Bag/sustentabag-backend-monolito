name: "Promoção Automática para Main"

on:
  # Trigger automático quando uma tag de develop é criada
  push:
    tags:
      - 'dev-*'
  
  # Trigger quando uma tag é criada via API ou interface web  
  create:
  
  # Trigger quando qualquer workflow é concluído com sucesso
  workflow_run:
    workflows: ["Fluxo de Branches e Tags", "CI Pipeline"]
    types:
      - completed
  
  # Trigger diário às 00:00 UTC para verificar se há mudanças
  schedule:
    - cron: '0 0 * * *'
  
  # Opção manual para casos específicos
  workflow_dispatch:
    inputs:
      dev_tag:
        description: 'Tag da develop para promover (ex: dev-012)'
        required: false
        default: ''
      version:
        description: 'Versão para tag de release (ex: 1.2.3)'
        required: false
        default: ''

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job de observabilidade para depuração
  log-event:
    name: Registrar Detalhes do Evento
    runs-on: ubuntu-latest
    steps:
      - name: Registrar informações do evento
        run: |
          echo "Evento: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Push ref: ${{ github.ref }}"
            echo "Tag: ${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" == "create" ]; then
            echo "Create ref: ${{ github.ref }}"
            echo "Ref type: ${{ github.event.ref_type }}"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Workflow: ${{ github.event.workflow.name }}"
            echo "Conclusão: ${{ github.event.workflow_run.conclusion }}"
          fi
  
  # Job 1: Verificar status dos testes
  check-tests:
    name: Verificar Status dos Testes
    runs-on: ubuntu-latest
    needs: [log-event]
    # Pular se não for workflow_run do CI Pipeline
    if: |
      github.event_name != 'workflow_run' || 
      (github.event_name == 'workflow_run' && 
       github.event.workflow.name == 'CI Pipeline' && 
       github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Verificar status dos testes
        run: |
          echo "✅ Verificação de testes concluída com sucesso"
          echo "### ✅ Verificação de testes concluída" >> "$GITHUB_STEP_SUMMARY"

  # Job 2: Promover alterações da develop para a main
  auto-promote:
    name: Promover para Main
    needs: [check-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar identidade Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
      - name: Buscar todas as tags
        run: |
          git fetch --tags --force
          
          echo "Tags disponíveis:"
          git tag -l "dev-*" | sort -V
          echo "---"
      
      - name: Determinar tag da develop
        id: get-dev-tag
        run: |
          # Prioridade:
          # 1. Tag especificada no workflow_dispatch
          # 2. Tag que acionou o evento
          # 3. Última tag da develop
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.dev_tag }}" ]; then
            # Tag especificada manualmente
            DEV_TAG="${{ github.event.inputs.dev_tag }}"
          elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/dev-* ]]; then
            # Evento acionado por tag
            DEV_TAG="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" == "create" ] && [ "${{ github.event.ref_type }}" == "tag" ] && [[ "${{ github.event.ref }}" == dev-* ]]; then
            # Evento de criação de tag
            DEV_TAG="${{ github.event.ref }}"
          else
            # Buscar última tag da develop
            DEV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 1)
          fi
          
          if [ -z "$DEV_TAG" ]; then
            echo "::error::Nenhuma tag da develop encontrada para promoção"
            echo "### ❌ Promoção cancelada" >> "$GITHUB_STEP_SUMMARY"
            echo "Nenhuma tag da develop encontrada para promoção" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          
          # Verificar se a tag existe
          if ! git tag | grep -q "^$DEV_TAG$"; then
            echo "::error::Tag '$DEV_TAG' não encontrada no repositório"
            echo "### ❌ Tag não encontrada" >> "$GITHUB_STEP_SUMMARY"
            echo "A tag '$DEV_TAG' não existe no repositório" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          
          echo "dev_tag=$DEV_TAG" >> "$GITHUB_OUTPUT"
          echo "Tag da develop para promoção: $DEV_TAG" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Verificar se há mudanças para promover
        id: check-changes
        run: |
          git fetch origin develop
          git fetch origin main
          
          # Verificar se develop está à frente da main
          git checkout develop
          git pull origin develop
          
          # Comparar develop com main
          AHEAD=$(git rev-list --count origin/main..origin/develop)
          
          if [ "$AHEAD" -eq "0" ]; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            echo "### ℹ️ Não há mudanças para promover" >> "$GITHUB_STEP_SUMMARY"
            echo "A branch develop está sincronizada com a main. Não há mudanças para promover." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
            echo "### ✅ Há mudanças para promover" >> "$GITHUB_STEP_SUMMARY"
            echo "A branch develop está $AHEAD commit(s) à frente da main." >> "$GITHUB_STEP_SUMMARY"
          fi
      
      - name: Gerar versão para release
        id: generate-version
        if: steps.check-changes.outputs.no_changes != 'true'
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Usar versão fornecida pelo usuário
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! $VERSION == v* ]]; then
              VERSION="v$VERSION"
            fi
          else
            # Gerar versão automática baseada na última tag de release
            LATEST_TAG=$(git tag -l "v*" | grep -v "dev-" | sort -V | tail -n 1)
            
            if [ -z "$LATEST_TAG" ]; then
              # Se não houver tag, começar com v1.0.0
              VERSION="v1.0.0"
            else
              # Extrair números da versão
              MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\1/')
              MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\2/')
              PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\3/')
              
              # Incrementar patch
              PATCH=$((PATCH + 1))
              VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Versão gerada para release: $VERSION" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Promover para main
        if: steps.check-changes.outputs.no_changes != 'true'
        run: |
          DEV_TAG="${{ steps.get-dev-tag.outputs.dev_tag }}"
          VERSION="${{ steps.generate-version.outputs.version }}"
          
          # Checkout da main
          git checkout main
          git pull origin main
          
          # Fazer merge da develop para main
          echo "Mergeando develop (tag $DEV_TAG) para main como $VERSION"
          git merge --no-ff origin/develop -m "Merge da develop (tag $DEV_TAG) para release $VERSION"
          
          # Criar tag de versão
          git tag -a "$VERSION" -m "Release $VERSION (promovida da tag $DEV_TAG)"
          
          # Push das mudanças
          git push origin main
          git push origin "$VERSION"
          
          echo "### ✅ Main atualizada com sucesso" >> "$GITHUB_STEP_SUMMARY"
          echo "- Tag da develop: $DEV_TAG" >> "$GITHUB_STEP_SUMMARY"
          echo "- Nova tag de release: $VERSION" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Gerar changelog
        if: steps.check-changes.outputs.no_changes != 'true'
        id: changelog
        run: |
          VERSION="${{ steps.generate-version.outputs.version }}"
          DEV_TAG="${{ steps.get-dev-tag.outputs.dev_tag }}"
          
          # Obter última tag de release para comparar alterações
          PREV_VERSION_TAG=$(git tag -l "v*" | grep -v "dev-" | sort -V | tail -n 2 | head -n 1)
          
          echo "### Changelog da versão $VERSION" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREV_VERSION_TAG" ] && [ "$PREV_VERSION_TAG" != "$VERSION" ]; then
            echo "Alterações desde $PREV_VERSION_TAG:" >> changelog.md
            git log --pretty=format:"- %s (%an)" $PREV_VERSION_TAG..HEAD >> changelog.md
          else
            echo "Primeiro lançamento oficial" >> changelog.md
            git log --pretty=format:"- %s (%an)" >> changelog.md
          fi
          
          cat changelog.md >> "$GITHUB_STEP_SUMMARY"
      
      - name: Criar GitHub Release
        if: steps.check-changes.outputs.no_changes != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate-version.outputs.version }}
          name: Release ${{ steps.generate-version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notificar equipe sobre promoção
        if: steps.check-changes.outputs.no_changes != 'true'
        run: |
          VERSION="${{ steps.generate-version.outputs.version }}"
          DEV_TAG="${{ steps.get-dev-tag.outputs.dev_tag }}"
          
          echo "### 🚀 Promoção concluída com sucesso" >> "$GITHUB_STEP_SUMMARY"
          echo "As mudanças da tag $DEV_TAG foram promovidas para main como versão $VERSION" >> "$GITHUB_STEP_SUMMARY"
          echo "Uma release foi criada no GitHub: https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Notificar que não há mudanças
        if: steps.check-changes.outputs.no_changes == 'true'
        run: |
          echo "### ℹ️ Não houve promoção" >> "$GITHUB_STEP_SUMMARY"
          echo "Não foram encontradas mudanças para promover da develop para a main" >> "$GITHUB_STEP_SUMMARY" 